from moveit_client import *
import scipy.spatial.transform as transform
from robot_helpers.spatial import Transform
import time
import copy
from trac_ik_python.trac_ik import IK
import numpy as np
import ipdb
import rospy

# ur5_file = open("/home/srinath/Documents/Master/arm_sim/src/universal_robot/ur_description/urdf/ur5_joint_limited_robot.urdf","r")
# ur5_string = " ".join(ur5_file.readlines())
# Initialize the IK solver
# ipdb.set_trace()
rospy.init_node('moveit_cartesian_execute', anonymous=True)
# ik_solver = IK("arm0_base_link", "arm0_wrist_roll")
# ik_solver = IK("arm0_shoulder_yaw", "arm0_wrist_roll")
# ik_solver = IK("base_link", "ee_link", urdf_string=ur5_string)

# ipdb.set_trace()

# moveit = MoveItClient("manipulator")
# moveit = MoveItClient("ur5_arm")
# moveit = MoveItClient("spot_arm")
moveit = MoveItClient("arm")

# rospy.sleep(1.0)  # Wait for connections to be established.
moveit.move_group.set_planner_id("RRTConnect")
# moveit.move_group.set_planner_id("STRIDE")
# moveit.move_group.set_planner_id("RRTstar")
# moveit.move_group.set_planner_id("PRMstar")
moveit.move_group.set_planning_time(10.0)
moveit.move_group.set_num_planning_attempts(1000)
moveit.move_group.set_max_velocity_scaling_factor(1) # Set velocity scaling here
moveit.move_group.set_max_acceleration_scaling_factor(1) # Set acceleration scaling here
  


# joint_angle_path = [(0.6763899758059961, -2.339004017044721, 0.3641465813926139, 1.5603519547413223, -1.5458803408162798, -1.1738168308837444), (0.6763899395510491, -2.0368410152860412, 1.5636426872312865, 1.4301922270362097, -1.8216318612490627, -2.089036118131683), (0.6763899395510492, -2.017353076259606, 1.6056564533680657, 1.5863213363944657, 1.5969239493415035, -1.5707302314087208), (3.141592653589793, -3.0579822091907363, 1.1718442407440401, 1.0630769652900502, 1.3459924135900465, -0.3827979024963202), (3.1103047010425366, -3.0524885772693326, 1.160138339725738, 0.7905494405025332, 1.236828485258316, -0.3197674090559115), (0.2852543215537065, -1.7581299639899903, 1.0252393647124165, -1.8444109814857645, 0.8811805456904375, 1.986234544791688), (-0.10466512214648772, -1.3559228885534045, 1.4320245915725285, -1.882557856082044, 0.8105885653831372, 2.0082620666893867), (0.5078892069409654, -1.3331103829060598, 0.6185795817836087, -1.750931558426264, 1.4904099752510522, 2.726359082760286), (0.5297206516414834, -1.3140329701631848, 0.6137565792541386, -2.0284039079587695, 1.3868325543006363, 2.7859925897193283), (0.03988020087085094, -1.8468154284855869, 0.5763360351651852, -1.5932469968727596, -1.5987227380938172, 0.8936341550910114), (0.06441178733517604, -1.8202097145634923, 0.5964582603307373, -1.7805464965735456, -1.8211851027259323, 0.8609682589712452), (-1.041817276569047, -2.747995267729528, 0.9468177055245695, -1.2826996250132712, 1.1729535786037004, 0.9177061168568637), (-2.262717954380736, -3.0622408598499815, 1.1181896274166045, -1.1659205927902798, 1.3635272311257431, 0.4476774099549302), (-2.308771754447668, -3.093970491077971, 1.5956729629398554, -2.6432423716060973, 1.5542413036058296, -0.009008318061444464), (-2.3076175467390936, -3.0997069721287405, 1.5649234767364408, -2.330602776754455, 1.5750437129530788, 0.00447031657047591), (-2.29154858683227, -3.095497211830524, 1.5877975402415254, -2.0328098677778224, 1.5652246185854772, -0.011188158318711179), (-2.29043742772288, -3.0783697174667033, 1.588201468676006, -1.7201090075556367, 1.5714249428454754, 0.00417831577957441), (0.645808592640066, -3.0227600044845815, 1.110812966708679, 0.06519145973393833, 1.034507176831791, -0.03334449565409037), (1.4996090323912155, -2.5310029295302976, 1.5547583667985077, -0.5624925004445479, 1.0600546437356726, -0.22467594983603995), (0.11637584063706578, -2.912787839813519, 1.0172129721932701, -2.1011718698462705, -1.137486262952174, 2.5202113725975335), (1.3171249641324603, -2.3239635149806146, 1.0411592836473778, -1.9043121042807023, -0.6910038269067875, 1.993563981865094), (1.3171260260910613, -2.31032957324686, 1.0734587478054591, -1.7644469755815628, -0.98716230818562, 1.9129483872753636)]

# Triad 2, linear layout, Straight path
# joint_angle_path = [(1.7550722391853901, -1.4459872353725363, 0.5521580836980257, 0.7948663596851021, -1.2298190157641493, -0.32845758129665126), (1.7550724516078013, -1.895365865293462, 1.2524065769856467, 1.5980797957442971, -1.0523178773939423, -1.6258071582114582), (1.7839350095717275, -1.9113551173300212, 1.240845214862413, 1.0116944827600205, -1.122632121232936, -1.3584691527195847), (1.7839350095717545, -1.9040855719583718, 1.2712142248946945, 1.584216074827948, -1.39486776807347, -1.6472888115619004), (2.3227774899791047, -2.0954976085268426, 0.7848248951566265, 2.249852318732113, 0.3415407474355773, -2.2791013559261692), (2.3520767344196503, -2.120727175076511, 0.7702558460949221, 1.007971005539581, -1.4761774429853878, -1.2708750763828838), (2.3520767344196503, -1.9881480721932026, 1.3723120905466817, 1.7273321907579038, -1.0415219054355371, -1.8737583869189136), (2.321766444631912, -1.9966138269496834, 1.3479786401601936, -0.06126444042357758, 0.769595634179578, 0.06863690264435728), (2.0530724187922194, -2.5117021302022344, 1.153402231690036, 0.8342682715706125, 0.7565137448674308, -0.6759719769901336)]

# AHG layout, zig zag, s-path
joint_angle_path = [
    (0.4463969723674979, -0.982117414166845, 1.2106590223038898, 1.3666320068535478, -1.4135885561145762, -0.6474379336772929), 
    (0.4464061931708768, -1.315407223403017, 1.5641021720961823, 1.5133804003235882, -1.3201538049186845, -1.3430704224791916), 
    (0.523131063310627, -1.5085003606669292, 1.5314726985974394, 1.8915386026987127, 0.18838511279337378, -1.89691810504647), 
    (0.5373197636160709, -1.4949856027972144, 1.563154924209723, 1.563735498004536, 1.7398576570382198, -2.1370639781633147), 
    (0.5373197636160704, -1.4903138185087978, 1.59280321629559, 1.5679118725084094, 1.7399967158576741, -2.11152267659297), (0.4568993466156019, -1.793145140798419, 1.3078913600087103, 1.5707313940287209, 1.5065957751225256, -1.5697585302470747), 
    (0.21722000218276527, -1.9824621467320005, 1.5595937149972328, 1.6465012209241394, 1.7292568772021348, -1.6463256868679248), 
    (1.4458754297174718, -2.6492836497353873, 1.5267012825909152, 0.8946182102234751, 1.2454429714106454, -0.9034592383416467), 
    (1.4055045966431732, -2.6703698770760718, 1.4997526917720232, 2.0702807524326294, 1.8271150918177046, -0.43495939970116027), 
    (2.0021119678943373, -2.6835842202111686, 1.5194833793227411, 1.8162960096840666, 1.6929460764007591, -0.4526461836742716), 
    (2.3979706939678054, -2.724499256365359, 1.6249346790212469, 2.756626301877231, 1.3423585473776565, -0.13739560374906762), 
    (2.6859131701827437, -2.955995389593714, 1.3712007773821007, 2.3876248223759786, 1.8259354210097691, -0.2327005595342084), 
    (2.9697510993417646, -2.720183909036276, 1.6072623826619599, 2.417897925915673, 1.8325577157691737, -0.2247997607082718), 
    (2.9764941466366275, -2.724644027490973, 1.6255889405794703, 2.4149990822082334, 1.8140440616029645, -0.21089012792704767), 
    (2.9717820232007663, -2.7428712987306474, 1.584144452214274, 2.415773445039192, 1.8324242256507959, -0.2256250695501995), 
    (3.004117410207259, -2.745613173490968, 1.5950854922443571, 1.1778784562342444, 1.4403642842795432, -0.30414419454708164), 
    (2.9764941394500015, -2.767345348841851, 1.5691688639082264, 2.4142657277253, 1.8246301890221022, 0.30368997885229354), 
    (3.0144966836859552, -3.0137448790305306, 1.456315275473876, 2.7106342611936514, 1.7536042292188951, 0.44020814202537756), 
    (3.0015615166980845, -3.0349361981280993, 1.4467828764270991, 2.7245985278937095, 1.7440083218993128, 0.4474015374857163), 
    (1.9936653203674584, -3.0256846924769776, 1.3378761263996406, 1.8373247406704607, 1.6541696317047245, 0.22754654270205388), 
    (1.99366532188372, -2.99635921265035, 1.3703756977994985, 0.6163493067299601, 1.3202068277670023, -0.17399422688370023),
	(3.0015606825718417, -3.0051931483379577, 1.4795011935802702, -0.41995787134790186, 1.4005402491714862, 0.07551155964075164),
	(3.0144966888378866, -3.0260465704778143, 1.4427812261366224, -0.43423474290979963, 1.3871327870566488, 0.08449552643777643),
	(3.0312848721009726, -3.0471993117385905, 1.430460445983053, -0.4505512688675074, 1.396524758602709, 0.08367927400477798),
	(3.031284953902071, -3.0175048412454957, 1.4628263503961518, -0.450348017517767, 1.398929763501701, 0.08249864454898732),
	(3.0504897116273533, -3.017135906782729, 1.4443463197085504, 0.8039697509139634, 1.4244568030142353, -0.1501962253472268),
	(2.200945474807035, -2.7044799546980998, 1.0639465538590884, -0.7306706982476938, 1.4419738987992208, 0.6494776376652361),
	(3.050497122989559, -3.0171397424785176, 1.4443439379218876, -1.7164175356948252, 1.6019749294727432, 0.20774791523214348),
	(3.0524245352523582, -3.038492214765553, 1.438159359319729, -1.4104757962096217, 1.5394192317074311, 0.1916221953484441),
	(3.052424544971693, -3.008773469819946, 1.470764177481116, -1.1010890332400511, 1.4833776367782996, 0.17032823994024546),
	(3.052424544971693, -2.9789296809644794, 1.5042330048597967, -1.100823626658519, 1.4850237208675432, 0.16708700584810152),
	(3.0721666364780615, -2.9786335319703516, 1.4860171544897038, -0.8102259336816267, 1.4276266733911147, 0.14883409758472926),
	(3.073644326909548, -3.000035240632064, 1.4791356619775637, -0.8102402966344667, 1.4378521312327703, 0.1384171072005863),
	(3.075060603515966, -3.021111045947232, 1.472986494300226, -0.8102670565174214, 1.4483292738399909, 0.1276948385624403),
	(3.0542791085401086, -3.0000011080416966, 1.4976973282511556, -2.344914366196999, 1.6924266462161968, 0.1234709362012202),
	(3.0335729481907503, -2.9787983688849624, 1.5232338288804979, -2.3245930607843417, 1.68688539713868, 0.12277009546900298),
	(3.010243761388474, -2.9789383521851187, 1.5080174078489141, -2.299955631752301, 1.6940495674517597, 0.13675128398403483),
	(2.9932266275066017, -2.957697993685787, 1.5219085509477144, -1.970934953997499, 1.6460538317960083, 0.17591437549797154),
	(3.0117115006215527, -2.9572907314850303, 1.502911951798166, -1.9876956161438377, 1.6571397035712359, 0.19231924031476239),
	(3.014496621680153, -2.936415160813221, 1.544219552317373, -1.0588425581216878, 1.47664402451908, -0.3580177512723818),
	(3.0447708985058224, -2.936389470426539, 1.541525585943886, -1.0890023603692052, 1.480541792917042, 0.17069449817713772),
	(3.046812925809821, -2.957717176523005, 1.533954362765756, -1.089962163370238, 1.4872450798819388, 0.15863025543763468),
	(2.745956333807344, -2.9547467569627934, 1.6017752512404333, -0.4712574481061791, 1.4688870566231165, 0.05179158931491322),
	(2.7386491685286596, -2.9747401197219783, 1.5948868489721655, -0.46335482257642086, 1.4802328418211224, 0.04515609899374804)]

# Triad 2, linear layout, Loop path
# joint_angle_path = [
# 	(-0.43524349535723533, -1.3579239551924027, 1.474054948574828, 1.692339858033286, 1.155053917222284, -1.86448433214102), 
# 	(-0.6115557876959968, -1.60496167705303, 0.8333143469861249, 1.730159988714313, 1.369803780416454, -2.2486236399310893), 
# 	(-0.38741781157206534, -1.0959998872949805, 1.4421116677597783, 1.6598931863659752, 1.4303961737787543, -2.1389537995653725), 
# 	(-0.39964097427196915, -1.1110904898528846, 1.4395023781177938, 1.828710147966232, 1.1760343177826613, -2.17205515586901), 
# 	(-0.4119866901820118, -1.1106464766640565, 1.4215981156102673, 2.0876101856401514, 1.7367538794669564, -2.132405500463634), 
# 	(-0.4070649201075923, -1.1205560985897052, 1.3891158647846185, 1.4770877549549395, 1.7096387125417791, -2.1676252008442822), 
# 	(0.38456647811232286, -2.1036165723234888, 0.4408073451482654, 2.3483744242778495, 1.4036756297805655, -2.3674598237300146), 
# 	(0.5488454857859392, -1.2641463728552167, 0.730039225309882, 1.1475395869150629, 1.7740028614393692, -2.7204120674563006), 
# 	(0.5488460177519843, -1.7330341006703762, 1.3466778096202319, 1.5676682059616764, 1.72375539830378, -1.591324121873568), 
# 	(0.3845664775966624, -1.954907694140666, 1.5675137136909638, 1.0595080600853743, 0.7430348729356796, -0.9197415363979207), 
# 	(0.6161103118433382, -1.3253663555001536, 1.4263286935539146, 1.5399012310886868, 1.6557201422791061, -1.9204470600399492), 
# 	(0.6044389097031356, -1.3013629955295578, 1.4554415677780808, 1.536331804943429, 1.6669285983203577, -1.9156497639497003), 
# 	(-0.6675166216452708, -1.2315571975546324, 1.5427007967808157, 1.6344925013347587, 1.3845439695838473, -1.9024880785317466), 
# 	(-0.6591727839619385, -1.21178716set_max_acceleration_scaling_factor55674302, 1.5506872201713966, 1.6395686539031102, 1.3774394502928116, -1.9149941465828788), 
# 	(-0.6402994677471173, -1.207751264860383, 1.5559134089310598, 1.6458271605221695, 1.3595878406804243, -1.9150885053239386), 
# 	(-0.8519205758384804, -1.5356521628179378, 1.533593963381948, 1.5811991040718942, 1.2447860738212955, -1.603256127027839), 
# 	(0.8096001100609721, -1.591570444074488, 1.477348736742055, 2.099000767934033, 1.4958652676082163, -1.6502066033205742), 
# 	(-0.022217261851018574, -0.7313438700355114, 1.5255966736074393, 0.4567289300040314, 1.6948761294940615, -2.7960184856878705), 
# 	(-0.04415919892547381, -1.9215473979160638, 0.8559550768441674, 1.5321340977332398, 1.6859528756744666, -1.8955238206774598), 
# 	(0.7568035478063466, -1.105902607915716, 0.8846531804404857, 1.3633529768345485, 1.0840733670196208, -2.615730913817815), 
# 	(0.7568069847949577, -1.5149007308029965, 1.0120598793577738, 1.4264047350668778, 1.7902008315931486, -2.1597670020903164), 
# 	(0.22426339470044213, -1.8296441531579835, 0.7254768476389734, 1.8236138147566943, 1.1793853408585875, -2.689651609403592), 
# 	(0.4074913852351656, -1.1861211905152624, 0.9848563502180825, 1.5851600305475995, 1.5600630192774276, -2.4998958675223797), 
# 	(0.7568006459412612, -1.5149262472314904, 1.0120380793788586, 1.5997526052338722, 1.5259182091009467, -2.144473659884463)
# ]

moveit.scene.clear()

# current_state = moveit.move_group.get_current_pose()

# this value in sim corresponds to the real robots arm "stowed" position
sim_stowed = np.array([0, -np.pi, 0.0, np.pi/2, 0, -np.pi/2])
actual_stowed = np.array([-0.0002665519714355469, -3.112858295440674, 3.129072904586792, 1.5583542585372925, -0.002824544906616211, -1.5687470436096191])
# actual_stowed = np.array([0, -np.pi, 3.129072904586792, np.pi/2, 0, -np.pi/2])
# actual_stowed = np.array([0, -np.pi, 3.129, np.pi/2, 0.0, -np.pi/2])

# joint_offset = (actual_stowed-sim_stowed)

# joint_angle_path = [np.array(x) + joint_offset for x in joint_angle_path]
# in simulation, the elbow pitch joint axis rotates in the opposite direction fron 0 to pi so invert that to make it work on the real robot
joint_angle_path = [[x[0], x[1], np.pi-x[2], x[3], x[4], x[5]] for x in joint_angle_path]
# ipdb.set_trace()
moveit.goto(list(actual_stowed), velocity_scaling=1, acceleration_scaling=1)
# Define your two end effector poses (position and orientation)
# Pose is typically represented as [x, y, z, qx, qy, qz, qw]
# waypoints_joint_distances = []
# joint_plans = []
# waypoints = []
# moveit.goto([0,-np.pi,0,0,0,0])
# start = time.time()
# for joint_angle in joint_angle_path:
#     success = moveit.goto(list(joint_angle), velocity_scaling=1, acceleration_scaling=1)
#     print(success)
    # _, plan = moveit.plan(list(joint_angle), velocity_scaling=1, acceleration_scaling=1)
    # state = moveit.move_group.get_current_state()
    # planL = moveit.move_group.retime_trajectory(
    #         state,
    #         plan,
    #         velocity_scaling_factor=1,
    #         acceleration_scaling_factor=1,
    #         algorithm="time_optimal_trajectory_generation",)
    # plan_copy = copy.deepcopy(planL)
    # joint_plans.append(plan_copy)
    # moveit.execute(planL)
# end = time.time()
# print(f"time with planning+exec = {(end-start)}")


# moveit.goto([0,-np.pi,0,0,0,0])
# ipdb.set_trace()
# start = time.time()
# for joint_plan in joint_plans:
#     success = moveit.move_group.execute(joint_plan, wait=True)
#     print(f"{success}")
# end = time.time()

# moveit.goto([0,-np.pi,0,0,0,0])
# moveit.goto([0,-3.0,np.pi-0.5,0,0,0])
# moveit.goto([0,-np.pi,np.pi,0,0,0])

# curr_pose = moveit.move_group.get_current_pose()
# curr_waypoint = Transform(transform.Rotation([curr_pose.pose.orientation.x, curr_pose.pose.orientation.y, curr_pose.pose.orientation.z, curr_pose.pose.orientation.w]),
#                           [curr_pose.pose.position.x, curr_pose.pose.position.y, curr_pose.pose.position.z])
# waypoints = [curr_waypoint]
for joint_angle in joint_angle_path:

    success = moveit.goto(list(joint_angle), velocity_scaling=1, acceleration_scaling=1)
    # time.sleep(1)
    # curr_pose = moveit.move_group.get_current_pose()
    # curr_waypoint = Transform(transform.Rotation([curr_pose.pose.orientation.x, curr_pose.pose.orientation.y, curr_pose.pose.orientation.z, curr_pose.pose.orientation.w]),
    #                           [curr_pose.pose.position.x, curr_pose.pose.position.y, curr_pose.pose.position.z])
    # waypoints.append(curr_waypoint)

    print(f"{success}")
# print(f"time with exec = {(end-start)}")
  

# moveit.goto([0,-np.pi,0,0,0,0])
moveit.goto(list(actual_stowed), velocity_scaling=1, acceleration_scaling=1)

###
# ipdb.set_trace()
# # moveit.goto([0,0,0,0,0,0])
# start = time.time()
# planL = moveit.planLs(waypoints)#, velocity_scaling=0.625, acceleration_scaling=0.625)
# ipdb.set_trace()
# moveit.execute(planL[0])

